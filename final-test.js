const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = 'http://127.0.0.1:54321'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU'

async function runFinalTests() {
  const supabase = createClient(supabaseUrl, supabaseKey)
  
  console.log('üß™ RUNNING FINAL SYSTEM TESTS...\n')
  
  let allTestsPassed = true
  
  // Test 1: Authentication
  console.log('1Ô∏è‚É£ TESTING AUTHENTICATION...')
  try {
    const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
      email: 'admin@pxvpay.com',
      password: 'SuperAdmin123!'
    })
    
    if (signInError) {
      console.log('  ‚ùå Super admin login failed:', signInError.message)
      allTestsPassed = false
    } else {
      console.log('  ‚úÖ Super admin login successful')
    }
  } catch (err) {
    console.log('  ‚ùå Auth test failed:', err.message)
    allTestsPassed = false
  }
  
  // Test 2: Users table
  console.log('\n2Ô∏è‚É£ TESTING USERS TABLE...')
  try {
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('*')
    
    if (usersError) {
      console.log('  ‚ùå Users query failed:', usersError.message)
      allTestsPassed = false
    } else {
      console.log(`  ‚úÖ Users table accessible, found ${users?.length || 0} users`)
      users?.forEach(user => {
        console.log(`    - ${user.email} (${user.role})`)
      })
    }
  } catch (err) {
    console.log('  ‚ùå Users test failed:', err.message)
    allTestsPassed = false
  }
  
  // Test 3: Notifications table
  console.log('\n3Ô∏è‚É£ TESTING NOTIFICATIONS TABLE...')
  try {
    const { data: notifications, error: notificationsError } = await supabase
      .from('notifications')
      .select('*')
      .limit(5)
    
    if (notificationsError) {
      console.log('  ‚ùå Notifications query failed:', notificationsError.message)
      allTestsPassed = false
    } else {
      console.log(`  ‚úÖ Notifications table accessible, found ${notifications?.length || 0} notifications`)
    }
  } catch (err) {
    console.log('  ‚ùå Notifications test failed:', err.message)
    allTestsPassed = false
  }
  
  // Test 4: Payments table
  console.log('\n4Ô∏è‚É£ TESTING PAYMENTS TABLE...')
  try {
    const { data: payments, error: paymentsError } = await supabase
      .from('payments')
      .select('*')
      .limit(5)
    
    if (paymentsError) {
      console.log('  ‚ùå Payments query failed:', paymentsError.message)
      allTestsPassed = false
    } else {
      console.log(`  ‚úÖ Payments table accessible, found ${payments?.length || 0} payments`)
    }
  } catch (err) {
    console.log('  ‚ùå Payments test failed:', err.message)
    allTestsPassed = false
  }
  
  // Test 5: Payment Methods table
  console.log('\n5Ô∏è‚É£ TESTING PAYMENT METHODS TABLE...')
  try {
    const { data: paymentMethods, error: paymentMethodsError } = await supabase
      .from('payment_methods')
      .select('*')
      .limit(5)
    
    if (paymentMethodsError) {
      console.log('  ‚ùå Payment methods query failed:', paymentMethodsError.message)
      allTestsPassed = false
    } else {
      console.log(`  ‚úÖ Payment methods table accessible, found ${paymentMethods?.length || 0} payment methods`)
    }
  } catch (err) {
    console.log('  ‚ùå Payment methods test failed:', err.message)
    allTestsPassed = false
  }
  
  // Test 6: Super Admin functionality
  console.log('\n6Ô∏è‚É£ TESTING SUPER ADMIN FUNCTIONALITY...')
  try {
    const { data: userProfile, error: profileError } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'admin@pxvpay.com')
      .single()
    
    if (profileError) {
      console.log('  ‚ùå Super admin profile query failed:', profileError.message)
      allTestsPassed = false
    } else if (userProfile?.role === 'super_admin') {
      console.log(`  ‚úÖ Super admin profile correct: ${userProfile.email} (${userProfile.role})`)
    } else {
      console.log('  ‚ùå Super admin role incorrect:', userProfile?.role)
      allTestsPassed = false
    }
  } catch (err) {
    console.log('  ‚ùå Super admin test failed:', err.message)
    allTestsPassed = false
  }
  
  console.log('\nüß™ FINAL TEST RESULTS:')
  if (allTestsPassed) {
    console.log('üéâ ALL TESTS PASSED! System is fully restored.')
    console.log('\n‚úÖ Database schema conflicts resolved')
    console.log('‚úÖ RLS infinite recursion fixed')
    console.log('‚úÖ All core tables accessible')
    console.log('‚úÖ Authentication working')
    console.log('‚úÖ Super admin functionality restored')
    
    console.log('\nüìã NEXT STEPS:')
    console.log('1. üîÑ Fix super admin dashboard routing')
    console.log('2. üîÑ Restore storage/market functionality')
    console.log('3. üîÑ Test all dashboard sections')
    console.log('4. üîÑ Verify payment processing flows')
  } else {
    console.log('‚ùå SOME TESTS FAILED! Manual intervention required.')
  }
}

runFinalTests().catch(console.error) 